
Работадателю:
Так как не знал раньше таких технологий как kafka, spark streaming, и так же никогда не работал на linux и с некоторыми библиотками, 
пришлось очень многое изучить. Что несомненно было крайне интересно, но сказалось на скорости выполнения задания, а так же на его сути.
Задание мной было понято не сразу и не до конца))) Поэтому слегка импровизировал, что сказалось на приложении. 
Пример тому - тот факт, что я понял только под завершение своей работы, что все выполнил так и не использовав 
spark streaming (отсюда делаю вывод, что не до конца понял суть задания, раз смог выполнить его таким образом).
Вчера и позавчера потратил большое колличество времени на то, чтобы понять, куда его впихнуть, но понял, 
что мое приложение по сути не оперирует таким количеством данных, с которым не справиться без SparkStreaming.
Под конец вчерашнего вечера я накидал вроде некоторый код, для связи с kafka с использованием spark, но в приложение вставлять не стал,
тк пока не доконца понимаю, как он работает. Боялся, что, поменяв все за один день, вообще нечего будет показать.
Как итог, упражнение было крайне интересным и дало очень сильный сеттап, хоть я по началу и не понял точную задачу))  

Так же небольшое примечание проект прекрасно компилируется и работает из IntellIJ IDEA, но с jar файлом под самый конец начались неполадки, 
и я просто не успел их исправить. Проблема в том, что изначально все работало через Class for name, но после я вычитал, что рефликсия это плохо и не нужно,
поменял код все прекрасно работало из IDEA, но в последний момент я обнаружил проблему в использовании драйвера, если запускать непосредственно jar файл.
Исправить не успел.

Что делает это приложение?
Позволяет выбрать действующий сетевой интерфейс, с которого будет проводиться захват пакетов, c использованием библиотеки pcap4j.
Объем перехваченного трафика будет транслироваться в БД каждые пять минут, и записывать действующее значение в таблицу. 
Также в таблице будут обновляться значения максимального и минимального трафика каждые 20 минут. При превышении данных лимитов
приложение будет отправлять сообщение alert в топик alert.
БД и таблица указаны в приложенной инструкции.  

Инструкция использования: для работы данного приложения необходимо установить драйвера WinPcap и JDBC.
Также необходимо иметь MySQL, в котором будет создана следующая база данных:

Код создания необходимой БД:

CREATE DATABASE traffic_limits;
USE traffic_limits;
CREATE table limits_per_hour
(limit_name CHAR(5) UNIQUE NOT NULL,
limit_value INT NOT NULL,
effective_date timestamp NOT NULL
);
INSERT limits_per_hour(limit_name, limit_value, effective_date)
VALUES
('min', 2, ('2020-04-06 10:38:05')),
('max', 5, ('2020-04-06 11:42:50'));
SELECT limit_name, effective_date, limit_value FROM limits_per_hour;

Приложение после запуска попросит ввести номер доступного сетевого интерфейса, с которого будет считываться трафик.
Далее пользователю будет предложено выбрать режим работы приложения. Оно включает в себя два режима работы: первый режим -
это режим по умолчанию. Режим по умолчанию включает в себя набор следующих начальных параметров программы:

Начальные параметры программмы в режиме по умолчанию: 
url: jdbc:mysql://localhost:3306/traffic_limits и TimeZone ?serverTimezone=Europe/Moscow&useSSL=FALSE"
useraname: root"
password: grushaED"
Время действия программы: 30 минут"

Чтобы выбрать режим по умолчанию, нажмите 0.

Если же вы хотите изменить параметры программы, нажмите 1. И установите значения выше приведенных параметров сами.
После выбора режима программа запустится на выполнение.

Для того, чтобы отслеживать действие программы и следить за изменением трафика в таблице, введите в MySQL следующую команду:
SELECT limit_name, effective_date, limit_value FROM limits_per_hour; 
Чтобы увидеть сообщение в топике kafka, запустите сервер zookeeper, затем сервер kafka. 
После создайте consumer и подключитесь к нужному топику alert, localhost:9092.